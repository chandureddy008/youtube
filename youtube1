pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_HUB_USERNAME', defaultValue: 'chandureddy008', description: 'Docker Hub Username')
        string(name: 'IMAGE_NAME', defaultValue: 'youtube', description: 'Docker Image Name')
        choice(name: 'action', choices: 'create\n delete', description: 'Select create or destroy.')
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Checkout from Git') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                              branches: [[name: 'main']],
                              userRemoteConfigs: [[url: 'https://github.com/chandureddy008/youtube.git']]])
                }
            }
        }

        stage('Npm') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    sh 'npm install' // Example npm installation command
                }
            }
        }

        stage('Docker Build') {
            when { 
                expression { params.action == 'create' }
            }    
            steps {
                script {
                    def dockerHubUsername = params.DOCKER_HUB_USERNAME
                    def imageName = params.IMAGE_NAME

                    dockerBuild(dockerHubUsername, imageName)
                }
            }
        }
        
        stage('Trivy Image') {
            when { 
                expression { params.action == 'create' }
            }    
            steps {
                script {
                    trivyImage()
                }
            }
        }

        stage('Slack Notifications') {
            when {
                expression { true } // This will always run after all stages
            }
            steps {
                script {
                    def COLOR_MAP = [
                        FAILURE: 'danger',
                        SUCCESS: 'good'
                    ]
                    
                    slackSend(
                        channel: '#youtube', // Replace with your channel name
                        color: COLOR_MAP[currentBuild.currentResult],
                        message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} \n build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
                    )
                }
            }
        }
    }
}

def dockerBuild(dockerHubUsername, imageName) {
    // Perform Docker build steps here using the provided parameters
    // For example:
    sh "docker build -t ${dockerHubUsername}/${imageName} ."
}

def trivyImage() {
    // Perform Trivy image scanning steps here
    // For example:
    sh "trivy ${dockerHubUsername}/${imageName}"
}
