pipeline {
    agent any
    
    parameters {
        choice(name: 'action', choices: 'create\n delete', description: 'Select create or destroy.')
    }

    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }

    stages {
        stage('Pull Docker Image') {
            steps {
                script {
                    // Pull Docker image from sevenajay/youtube repository
                    sh "docker pull sevenajay/youtube:latest"
                }
            }
        }
        
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('checkout from Git') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                              branches: [[name: 'main']],
                              userRemoteConfigs: [[url: 'https://github.com/chandureddy008/youtube.git']]])
                }
            }
        }

        stage('Npm') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    sh 'npm install' // Example npm installation command
                }
            }
        }

        stage("Docker Build & Push") {
            steps {
                script {
                    def newApiKey = "8cfd7e3b87msh8c064094f8436bfp136b5ejsn052f66e47193" // Replace with your new API key
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {   
                        sh "docker build --build-arg REACT_APP_RAPID_API_KEY=${newApiKey} -t youtube ."
                        sh "docker tag youtube chandureddy008/youtube:latest"
                        sh "docker push chandureddy008/youtube:latest"
                    }
                }
            }
        }

        stage("TRIVY") {
            steps {
                sh "trivy image chandureddy008/youtube:latest > trivyimage.txt"
            }
        }

        stage('Deploy to container') {
            steps {
                sh 'docker run -d --name youtube1 -p 3000:3000 chandureddy008/youtube:latest'
            }
        }

        stage('Slack Notifications') {
            when {
                expression { true }
            }
            steps {
                script {
                    def COLOR_MAP = [
                        FAILURE: 'danger',
                        SUCCESS: 'good'
                    ]
                    
                    slackSend(
                        channel: '#youtube',
                        color: COLOR_MAP[currentBuild.currentResult],
                        message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} \n build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
                    )
                }
            }
        }
    }
}
